package com.atlassian.confluence.extra.jira.api.services;

import com.atlassian.applinks.api.CredentialsRequiredException;
import com.atlassian.applinks.api.ReadOnlyApplicationLink;
import com.atlassian.confluence.content.render.xhtml.ConversionContext;
import com.atlassian.confluence.extra.jira.model.JiraResponseData;
import com.atlassian.confluence.macro.MacroExecutionException;
import com.atlassian.confluence.xhtml.api.MacroDefinition;
import com.atlassian.sal.api.net.ResponseException;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Service responsible for sending batch request to a JIRA server and get the results.
 */
public interface AsyncJiraIssueBatchService
{
    public static final String DARK_FEATURE_DISABLE_ASYNC_LOADING_KEY = "confluence.extra.jira.async.loading.disable";

    /**
     * <p>This method aims to process requests by server id, transform retrieved data to html.</p>
     *
     * @param clientId                  the key used to store data
     * @param serverId                 JIRA server ID
     * @param keys                     list of issue's keys to query data from Jira
     * @param macroDefinitions         list of macro definitions used while transforming retrieved data to html
     * @param conversionContext        conversion context used while transforming retrieved data to html
     */
    void processRequest(String clientId, String serverId, Set<String> keys, List<MacroDefinition> macroDefinitions, ConversionContext conversionContext);

    /**
     * <p>This method aims to process requests by server id, transform retrieved data to html.</p>
     *
     * @param clientId                  the key used to store data
     * @param conversionContext        conversion context used while transforming retrieved data to html
     */
    void processRequestTable(final String clientId, final Map<String, String> macroParams, final Map<String, Object> contextMap, final ConversionContext conversionContext,
                             final List<String> columnNames, String url,
                             final ReadOnlyApplicationLink appLink) throws CredentialsRequiredException, IOException, ResponseException, MacroExecutionException;

    /**
     * <p>Retrieve data generated by {@link #processRequest}.</p>
     *
     * @param clientId the key used to retrieve data
     * @return response data (which has been transform to html) from Jira
     * @throws Exception
     */
    JiraResponseData getAsyncJiraResults(String clientId);
}
